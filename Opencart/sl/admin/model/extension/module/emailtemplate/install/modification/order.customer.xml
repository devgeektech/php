<file path="catalog/controller/mail/order.php" email_template="order.customer">
    <operation>
        <search index="0"><![CDATA[$data['products'][] = array(]]></search>
        <add position="after"><![CDATA[				'product_id'  => $order_product['product_id'],
				'order_product_id'  => $order_product['order_product_id'],]]></add>
    </operation>
    <operation>
        <search index="0"><![CDATA['name'  => $order_option['name'],]]></search>
        <add position="before"><![CDATA[					'order_option_id'  => $order_option['order_option_id'],]]></add>
    </operation>
    <operation>
		<search index="0"><![CDATA[$mail = new Mail(]]></search>
		<add position="before"><![CDATA[
		// Prepare mail: order.customer
		$language->load('product/product'); // required for stock status
		$language->load('extension/module/emailtemplate/order');

		$this->load->model('tool/image');
		$this->load->model('catalog/product');
		$this->load->model('extension/module/emailtemplate');

		$template_load = array(
			'key' => 'order.customer',
			'customer_id' => $order_info['customer_id'],
            'customer_group_id' => $order_info['customer_group_id'],
            'language_id' => $order_info['language_id'],
            'order_status_id' => $order_status_id,
            'store_id' => $order_info['store_id'],
            'payment_method' => $order_info['payment_code'],
            'shipping_method' => $order_info['shipping_code']
		);

		$template_filter = array();

		if (!empty($order_info['customer_id']) && !isset($total_customer_orders)) {
			$total_customer_orders_query = $this->db->query("SELECT count(1) as total FROM `" . DB_PREFIX . "order` WHERE customer_id = '" . (int)$order_info['customer_id'] . "'");

			if ($total_customer_orders_query->row) {
				$total_customer_orders = $total_customer_orders_query->row['total'];
				$template_filter['total_customer_orders'] = $total_customer_orders;
			}
		}

		$template = $this->model_extension_module_emailtemplate->load($template_load, $template_filter);

        if ($template) {
            $template->addData($order_info);

            if (!empty($data)) $template->addData($data);

            if (!empty($order_info['customer_group_id'])) {
                $this->load->model('account/customer_group');

                $customer_group = $this->model_account_customer_group->getCustomerGroup($order_info['customer_group_id']);

                $template->data['customer_group'] = array(
                    'name' => $customer_group['name'],
                    'description' => $customer_group['description']
                );
            }

            if (!empty($order_info['affiliate_id']) && file_exists(DIR_APPLICATION . 'model/account/affiliate.php')) {
                $this->load->model('account/affiliate');

                $affiliate_info = $this->model_account_affiliate->getAffiliate($order_info['affiliate_id']);

                if ($affiliate_info) {
                    $template->data['affiliate'] = $affiliate_info;
                }
            }

            // Custom fields
            if (!empty($order_info['custom_field']) || !empty($order_info['payment_custom_field'])) {
                $this->load->model('account/custom_field');

                // Cleanup
                foreach(array('custom_field', 'payment_custom_field', 'shipping_custom_field') as $var) {
                    if (isset($template->data[$var])) {
                        unset($template->data[$var]);
                    }
                }

                if (!empty($order_info['customer_group_id'])) {
                    $customer_group_id = $order_info['customer_group_id'];
                } else {
                    $customer_group_id = $this->config->get('config_customer_group_id');
                }

                $custom_fields = $this->model_account_custom_field->getCustomFields($customer_group_id);

                foreach ($custom_fields as $custom_field) {
                    if (isset($order_info['payment_custom_field'][$custom_field['custom_field_id']])) {
                        $template->data['custom_field_' . $custom_field['custom_field_id'] . '_name'] = $custom_field['name'];

                        if ($custom_field['custom_field_value']) {
                            foreach ($custom_field['custom_field_value'] as $custom_field_value) {
                                if (is_array($order_info['payment_custom_field'][$custom_field['custom_field_id']])) {
                                    if (in_array($custom_field_value['custom_field_value_id'], $order_info['payment_custom_field'][$custom_field['custom_field_id']])) {
                                        $template->data['custom_field_' . $custom_field['custom_field_id'] . '_value_' . $custom_field_value['custom_field_value_id']] = $custom_field_value['name'];
                                    }
                                } else {
                                    if ($custom_field_value['custom_field_value_id'] == $order_info['payment_custom_field'][$custom_field['custom_field_id']]) {
                                        $template->data['custom_field_' . $custom_field['custom_field_id'] . '_value'] = $custom_field_value['name'];
                                    }
                                }
                            }
                        } else {
                            $template->data['custom_field_' . $custom_field['custom_field_id'] . '_value'] = $order_info['payment_custom_field'][$custom_field['custom_field_id']];
                        }
                    } elseif (isset($order_info['custom_field'][$custom_field['custom_field_id']])) {
                        $template->data['custom_field_' . $custom_field['custom_field_id'] . '_name'] = $custom_field['name'];

                        if ($custom_field['custom_field_value']) {
                            foreach ($custom_field['custom_field_value'] as $custom_field_value) {
                                if (is_array($order_info['custom_field'][$custom_field['custom_field_id']])) {
                                    if (in_array($custom_field_value['custom_field_value_id'], $order_info['custom_field'][$custom_field['custom_field_id']])) {
                                        $template->data['custom_field_' . $custom_field['custom_field_id'] . '_value_' . $custom_field_value['custom_field_value_id']] = $custom_field_value['name'];
                                    }
                                } else {
                                    if ($custom_field_value['custom_field_value_id'] == $order_info['custom_field'][$custom_field['custom_field_id']]) {
                                        $template->data['custom_field_' . $custom_field['custom_field_id'] . '_value'] = $custom_field_value['name'];
                                    }
                                }
                            }
                        } else {
                            $template->data['custom_field_' . $custom_field['custom_field_id'] . '_value'] = $order_info['custom_field'][$custom_field['custom_field_id']];
                        }
                    }
                }
            }

            // Address
            foreach(array('payment', 'shipping') as $var) {
                if ($order_info[$var . '_address_format']) {
                    $format = $order_info[$var . '_address_format'];
                } else {
                    $format = '{firstname} {lastname}' . "\n" . '{company}' . "\n" . '{address_1}' . "\n" . '{address_2}' . "\n" . '{city} {postcode}' . "\n" . '{zone}' . "\n" . '{country}';
                }

                $find = array(
                    '{firstname}',
                    '{lastname}',
                    '{company}',
                    '{address_1}',
                    '{address_2}',
                    '{city}',
                    '{postcode}',
                    '{zone}',
                    '{zone_code}',
                    '{country}'
                );

                $replace = array(
                    'firstname' => $order_info[$var . '_firstname'],
                    'lastname'  => $order_info[$var . '_lastname'],
                    'company'   => $order_info[$var . '_company'],
                    'address_1' => $order_info[$var . '_address_1'],
                    'address_2' => $order_info[$var . '_address_2'],
                    'city'      => $order_info[$var . '_city'],
                    'postcode'  => $order_info[$var . '_postcode'],
                    'zone'      => $order_info[$var . '_zone'],
                    'zone_code' => $order_info[$var . '_zone_code'],
                    'country'   => $order_info[$var . '_country']
                );

                if (isset($order_info['custom_field'])) {
                    foreach ($order_info['custom_field'] as $custom_field_id => $custom_field) {
                        $find[] = '{custom_field_' . $custom_field_id . '}';
                        $replace[] = isset($custom_field['value']) ? $custom_field['value'] : '';
                    }
                }

                if (isset($order_info[$var . '_custom_field'])) {
                    foreach ($order_info[$var . '_custom_field'] as $custom_field_id => $custom_field) {
                        $find[] = '{custom_field_' . $custom_field_id . '}';
                        $replace[] = isset($custom_field['value']) ? $custom_field['value'] : $custom_field;
                    }
                }

                $template->data[$var . '_address'] = str_replace(array("\r\n", "\r", "\n"), '<br />', preg_replace(array("/\s\s+/", "/\r\r+/", "/\n\n+/"), '<br />', trim(str_replace($find, $replace, $format))));
            }

            $order_status_query = $this->db->query("SELECT `name` FROM " . DB_PREFIX . "order_status WHERE order_status_id = '" . (int)$order_status_id . "' AND language_id = '" . (int)$order_info['language_id'] . "' LIMIT 1");

            if ($order_status_query->row) {
                $order_status = $order_status_query->row['name'];

                $template->data['order_status'] = $order_status;
            }

            if ($this->config->get('config_processing_status') && in_array($order_status_id, $this->config->get('config_processing_status'))) {
                $template->data['order_processing_status'] = true;
            } elseif ($this->config->get('config_complete_status') && in_array($order_status_id, $this->config->get('config_complete_status'))) {
                $template->data['order_complete_status'] = true;
            }

            $template->data['total_customer_orders'] = isset($total_customer_orders) ? $total_customer_orders : 0;

            $products_stock = array();

            if (!empty($template->data['config']['order_products']['option_length'])) {
                $option_length = $template->data['config']['order_products']['option_length'];
            } else {
                $option_length = 120;
            }

            // Add extra data to products array
            $template->data['products'] = $data['products'];

            foreach ($template->data['products'] as $i => $product) {
                $order_product = false;
                foreach ($order_products as $row) {
                    if ($product['order_product_id'] == $row['order_product_id']) {
                        $order_product = $row;
                        break;
                    }
                }

                $product_data = $this->model_catalog_product->getProduct($order_product['product_id']);

                if ($product_data) {
                    if ($product['option']) {
                        $order_options = $this->model_checkout_order->getOrderOptions($order_info['order_id'], $order_product['order_product_id']);

                        foreach ($product['option'] as $ii => $product_option) {
                            $order_option = false;
                            foreach ($order_options as $order_option) {
                                if ($order_option['order_option_id'] == $product_option['order_option_id']) {
                                    break;
                                }
                            }

                            if ($order_option && $order_option['type'] != 'file') {
                                $value = $order_option['value'];
                                $template->data['products'][$i]['option'][$ii]['value'] = utf8_strlen($value) > $option_length ? utf8_substr($value, 0, $option_length) . '..' : $value;
                            }
                        }

                        $product_data['option_value'] = array();

                        $order_option_query = $this->db->query("SELECT oo.* FROM " . DB_PREFIX . "order_option oo WHERE oo.order_product_id = '" . (int)$product['order_product_id'] . "' AND oo.order_id = '" . (int)$order_info['order_id'] . "'");

                        if ($order_option_query->rows) {
                            foreach ($order_option_query->rows as $order_option) {
                                $order_option_value_query = $this->db->query("SELECT pov.*, ov.image FROM " . DB_PREFIX . "product_option_value pov LEFT JOIN " . DB_PREFIX . "option_value ov ON (pov.option_value_id = ov.option_value_id) WHERE pov.product_option_value_id = '" . (int)$order_option['product_option_value_id'] . "'");

                                if ($order_option_value_query->rows) {
                                    foreach ($order_option_value_query->rows as $order_option_value) {
                                        $product_data['option_value'][] = array(
                                            'order_option_id' => $order_option['order_option_id'],
                                            'product_option_value_id' => $order_option['product_option_value_id'],
                                            'type' => $order_option['type'],
                                            'image' => $order_option_value['image'],
                                            'price' => $order_option_value['price'],
                                            'price_prefix' => $order_option_value['price_prefix'],
                                            //'stock_quantity' => $order_option_value['quantity'],
                                            'value' => $order_option['value']
                                        );
                                    }
                                }
                            }
                        }
                    }

                    if (!empty($template->data['config']['order_products']['image'])) {
                        $image = $product_data['image'];

                        if (!empty($product_data['option_value']) && !empty($template->data['config']['order_products']['option_image'])) {
                            foreach($product_data['option_value'] as $product_option_value) {
                                if ($product_option_value['image']) {
                                    $image = $product_option_value['image'];
                                    break;
                                }
                            }
                        }

                        if ($image) {
                            $image_width = isset($template->data['config']['order_products']['image_width']) ? $template->data['config']['order_products']['image_width']: 100;
                            $image_height = isset($template->data['config']['order_products']['image_height']) ? $template->data['config']['order_products']['image_height']: 100;

                            if ($image_width && $image_height) {
                                $image = $this->model_tool_image->resize($image, $image_width, $image_height);
                                if (substr($image, 0, 4) != 'http') {
                                    $image = $order_info['store_url'] . ltrim($image, '/');
                                }
                            }
                        }
                    }

                    $url = $this->url->link('product/product', 'product_id='.$order_product['product_id']);

                    // Products Stock
                    /*if (!isset($products_stock[$order_product['product_id']]['stock_quantity'])) {
                        $products_stock[$order_product['product_id']]['stock_quantity'] = (int)$product_data['quantity'];
                    }

                    if ($product_data['subtract']) {
                        $products_stock[$order_product['product_id']]['stock_quantity'] -= (int)$product['quantity'];
                    }*/

                    if ($product_data['quantity'] <= 0) {
                        $stock_status = $product_data['stock_status'];
                    } elseif ($this->config->get('config_stock_display')) {
                        $stock_status = $product_data['quantity'];
                    } else {
                        $stock_status = $this->language->get('text_instock');
                    }

                    $template->data['products'][$i] = array_merge($template->data['products'][$i], array(
                        'url' => $url,
                        'image' => !empty($image) ? $image : '',
                        'weight' => ($product_data['weight'] > 0) ? $this->weight->format($product_data['weight'], $product_data['weight_class_id']) : 0,
                        'manufacturer' => $product_data['manufacturer'],
                        'stock_status' => $stock_status
                    ));

                    if (!empty($template->data['config']['order_products']['description']) && $product_data['description']) {
                        $template->data['products'][$i]['description'] = utf8_substr(strip_tags(html_entity_decode($product_data['description'], ENT_QUOTES, 'UTF-8')), 0, 200) . '..';
                    }

                    if (!empty($template->data['config']['order_products']['model'])) {
                        $template->data['products'][$i]['model'] = $product_data['model'];
                    } elseif (isset($template->data['products'][$i]['model'])) {
                        unset($template->data['products'][$i]['model']);
                    }

                    if (!empty($template->data['config']['order_products']['sku'])) {
                        $template->data['products'][$i]['sku'] = $product_data['sku'];
                    } elseif (isset($template->data['products'][$i]['sku'])) {
                        unset($template->data['products'][$i]['sku']);
                    }

                    if (!empty($template->data['config']['order_products']['rating'])) {
                        $template->data['products'][$i]['rating'] = $product_data['rating'];
                        $template->data['products'][$i]['reviews'] = $product_data['reviews'];
                    }
                }
            }

            // Products Stock
            /*foreach ($template->data['products'] as $i => $product) {
                if (isset($products_stock[$product['product_id']]['stock_quantity'])) {
                    $template->data['products'][$i]['stock_quantity'] = $products_stock[$product['product_id']]['stock_quantity'];
                }
            }*/

            $template->data['order_comment'] = nl2br($order_info['comment']);

            if ($order_info['comment'] != $comment) {
                $template->data['comment'] = nl2br($order_info['comment']);

                $template->data['instruction'] = nl2br($comment);
            } else {
                $template->data['comment'] = nl2br($comment);

                $template->data['instruction'] = '';
            }

            $template->data['date_added'] = date($this->language->get('date_format_short'), strtotime($order_info['date_added']));

            $template->data['date_modified'] = date($this->language->get('date_format_short'), strtotime($order_info['date_modified']));

            if ($order_info['invoice_no']) {
                $template->data['invoice_no'] = $order_info['invoice_prefix'] . $order_info['invoice_no'];
            } else {
                $template->data['invoice_no'] = '';
            }

            $template->data['order_total'] = $this->currency->format($order_info['total'], $order_info['currency_code'], $order_info['currency_value']);

            $template->data['order_subject_products'] = '';

            if (!empty($template->data['products'])) {
                foreach ($template->data['products'] as $order_product) {
                    if (strpos($template->data['order_subject_products'], $order_product['name']) === false) {
                        $template->data['order_subject_products'] .= ($template->data['order_subject_products'] ? ', ' : '') . strip_tags($order_product['name']);
                    }
                }
            }

            if (!empty($template->data['vouchers'])) {
                foreach ($template->data['vouchers'] as $order_voucher) {
                    if (strpos($template->data['order_subject_products'], $order_voucher['description']) === false) {
                        $template->data['order_subject_products'] .= ($template->data['order_subject_products'] ? ', ' : '') . strip_tags($order_voucher['description']);
                    }
                }
            }

            if ($template->data['order_subject_products']) {
                $template->data['order_subject_products'] = trim(html_entity_decode($template->data['order_subject_products'], ENT_QUOTES, 'UTF-8'));

                $length = 32;

                if (strlen($template->data['order_subject_products']) > $length) {
                    $template->data['order_subject_products'] = substr($template->data['order_subject_products'], 0, strrpos(substr($template->data['order_subject_products'], 0, $length), ' ')) . '...';
                }
            }

            if ($order_info['customer_id']) {
                $template->data['order_link'] = $order_info['store_url'] . 'index.php?route=account/order/info&order_id=' . $order_info['order_id'];

                if ($this->language->get('button_order_link') && $this->language->get('button_order_link') != 'button_order_link') {
                    $template->data['order_link_text'] = $this->language->get('button_order_link');
                } else {
                    $template->data['order_link_text'] = $order_info['store_url'] . 'index.php?route=account/order/info&order_id=' . $order_info['order_id'];
                }
            }

            if ($download_status) {
                $template->data['download_link'] = $order_info['store_url'] . 'index.php?route=account/download';

                if ($this->language->get('button_download_link') && $this->language->get('button_download_link') != 'button_download_link') {
                    $template->data['download_link_text'] = $this->language->get('button_download_link');
                } else {
                    $template->data['download_link_text'] = $template->data['download_link'];
                }
            }
		    // Prepared mail: order.customer
		}
		]]></add>
	</operation>
	<operation>
		<search index="0"><![CDATA[$mail->send();]]></search>
		<add position="replace"><![CDATA[
		// Send mail: order.customer
		if ($template && $template->check()) {
		    $template->build();
		    $template->hook($mail);
        }

		$mail->send();

		$this->model_extension_module_emailtemplate->sent();]]></add>
	</operation>
    <operation error="skip">
        <search><![CDATA[$mail->setHtml($this->load->view('mail/order_add', $data));]]></search>
        <ignoreif><![CDATA[if (empty($template)) $mail->setHtml($this->load->view('mail/order_add', $data));]]></ignoreif>
        <add position="replace"><![CDATA[if (empty($template)) $mail->setHtml($this->load->view('mail/order_add', $data));]]></add>
    </operation>
</file>
